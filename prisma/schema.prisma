generator client {
  provider = "prisma-client-js"
}

datasource racingresults {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Driver {
  id                 Int                    @id @default(autoincrement())
  uuid               String                 @unique @default(uuid())
  name               String
  nationality        String?
  created            DateTime               @default(now())
  fastest_laps       FastestLap[]
  results            ResultEntry[]
  aggregated_results AggreatedResultEntry[]
  Penalty            Penalty[]
}

model Team {
  id                 Int                    @id @default(autoincrement())
  uuid               String                 @unique @default(uuid())
  name               String
  created            DateTime
  results            ResultEntry[]
  aggregated_results AggreatedResultEntry[]
}

model Car {
  id                   Int                    @id @default(autoincrement())
  uuid                 String                 @unique @default(uuid())
  name                 String
  ResultEntry          ResultEntry[]
  AggreatedResultEntry AggreatedResultEntry[]
}

model Event {
  id                 Int                    @id @default(autoincrement())
  uuid               String                 @unique @default(uuid())
  name               String
  country            String?
  start_date         DateTime               @default(now())
  end_date           DateTime?
  results            EventResult[]
  aggregated_results AggreatedResultEntry[]
}

model Circuit {
  id           Int           @id @default(autoincrement())
  uuid         String        @unique @default(uuid())
  name         String
  length       Int
  first_event  DateTime      @default(now())
  results      EventResult[]
  fastest_laps FastestLap[]
}

model EventResult {
  id                  Int           @id @default(autoincrement())
  uuid                String        @unique @default(uuid())
  // used to order results within an event. e.g. race 1, race 2, stage 1, stage 2, etc.
  event_result_number Int           @default(1)
  // misc info about the result
  ranked              Boolean
  type                EventType
  // event
  event_uuid          String
  event               Event         @relation(fields: [event_uuid], references: [uuid])
  // circuit
  circuit_uuid        String
  circuit             Circuit       @relation(fields: [circuit_uuid], references: [uuid])
  // fastest lap
  fastest_lap_uuid    String?       @unique
  fastest_lap         FastestLap?   @relation(fields: [fastest_lap_uuid], references: [uuid])
  // results in no order
  results             ResultEntry[]
  penalty             Penalty[]
  // what leg/day this race/stage was on
  leg                 Int           @default(1)
}

model FastestLap {
  // id of this result
  id                Int          @id @default(autoincrement())
  uuid              String       @unique @default(uuid())
  // driver info
  driver_uuid       String
  driver            Driver       @relation(fields: [driver_uuid], references: [uuid])
  // event info
  event_result_uuid String?
  event_result      EventResult?
  // circuit info
  circuit_uuid      String
  circuit           Circuit      @relation(fields: [circuit_uuid], references: [uuid])
  // fastest lap data
  time              Int
  lap               Int?
  // if it was an individual result rather than event result
  result_entry_uuid String?      @unique
  result_entry      ResultEntry?
}

model ResultEntry {
  // result ids
  id                Int          @id @default(autoincrement())
  uuid              String       @unique @default(uuid())
  // driver info
  driver_uuid       String
  driver            Driver       @relation(fields: [driver_uuid], references: [uuid])
  // if they finished
  finished          Boolean      @default(true)
  // completed laps
  laps              Int?
  // total time to complete event
  time              Int
  // car
  car_uuid          String?
  car               Car?         @relation(fields: [car_uuid], references: [uuid])
  // starting position
  grid              Int?
  // which event result this is part of
  event_result_uuid String?
  event_result      EventResult? @relation(fields: [event_result_uuid], references: [uuid])
  // their fastest lap
  fastest_lap       FastestLap?  @relation(fields: [fastest_lap_uuid], references: [uuid])
  fastest_lap_uuid  String?      @unique
  // what team they were with
  team_uuid         String?
  team              Team?        @relation(fields: [team_uuid], references: [uuid])

  // result entry must be unique to driver + stage
  @@unique([driver_uuid, event_result_uuid], name: "resultEntryIdentifier")
}

// used more for a rally than a normal racing event - sum of all times up to that event_result_num
model AggreatedResultEntry {
  // result ids
  id Int @id @default(autoincrement())

  // driver info
  driver_uuid         String
  driver              Driver  @relation(fields: [driver_uuid], references: [uuid])
  // total time to complete event
  time                Int
  // car
  car_uuid            String?
  car                 Car?    @relation(fields: [car_uuid], references: [uuid])
  // which event this is part of
  event_uuid          String?
  event               Event?  @relation(fields: [event_uuid], references: [uuid])
  // aggregated result _after_ this event_result_number, e.g. aggregated result after race 1
  event_result_number Int

  // what team they were with
  team_uuid String?
  team      Team?   @relation(fields: [team_uuid], references: [uuid])

  // have they retired? :(
  retired        Boolean?
  retired_reason String?

  // aggregate result entry must be unique to driver + event + event_result_number
  @@unique([driver_uuid, event_uuid, event_result_number], name: "aggregateResultEntryIdentifier")
}

enum EventType {
  CIRCUIT
  RALLY
}

model Penalty {
  // penalty id
  id Int @id @default(autoincrement())

  // driver
  driver_uuid String
  driver      Driver @relation(fields: [driver_uuid], references: [uuid])

  time   Int
  reason String

  // event result
  event_result_uuid String
  event_result      EventResult @relation(fields: [event_result_uuid], references: [uuid])
}

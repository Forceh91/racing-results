generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Driver {
    id           Int           @id @default(autoincrement())
    uuid         String        @unique @default(uuid())
    name         String
    created      DateTime
    fastest_laps FastestLap[]
    result_entry ResultEntry[]
}

model Team {
    id           Int           @id @default(autoincrement())
    uuid         String        @unique @default(uuid())
    name         String
    created      DateTime
    result_entry ResultEntry[]
}

model Event {
    id           Int           @id @default(autoincrement())
    uuid         String        @unique @default(uuid())
    name         String
    start_date   DateTime      @default(now())
    end_date     DateTime?
    event_result EventResult[]
}

model Circuit {
    id           Int           @id @default(autoincrement())
    uuid         String        @unique @default(uuid())
    name         String
    length       Int
    first_event  DateTime      @default(now())
    event_result EventResult[]
    fastest_laps FastestLap[]
}

model EventResult {
    id               Int           @id @default(autoincrement())
    uuid             String        @unique @default(uuid())
    ranked           Boolean
    type             EventType
    // event
    event_uuid       String
    event            Event         @relation(fields: [eventId], references: [id])
    // circuit
    circuit_uuid     String
    circuit          Circuit       @relation(fields: [circuit_uuid], references: [uuid])
    // fastest lap
    fastest_lap      FastestLap    @relation(fields: [fastest_lap_uuid], references: [uuid])
    fastest_lap_uuid String
    // results in no order
    results          ResultEntry[]
    eventId          Int
}

model FastestLap {
    uuid         String        @unique @default(uuid())
    driver       Driver        @relation(fields: [driver_uuid], references: [uuid])
    driver_uuid  String
    circuit      Circuit       @relation(fields: [circuit_uuid], references: [uuid])
    circuit_uuid String
    time         Int
    lap          Int?
    event_result EventResult[]
    result_entry ResultEntry[]
}

model ResultEntry {
    id               Int          @id @default(autoincrement())
    uuid             String       @unique @default(uuid())
    driver           Driver       @relation(fields: [driver_uuid], references: [uuid])
    driver_uuid      String
    finished         Boolean
    laps             Int?
    time             Int
    car              String?
    fastest_lap      FastestLap   @relation(fields: [fastest_lap_uuid], references: [uuid])
    fastest_lap_uuid String
    grid             Int?
    event_result     EventResult? @relation(fields: [event_uuid], references: [uuid])
    event_uuid       String
    team_uuid        String
    team             Team?        @relation(fields: [team_uuid], references: [uuid])
}

enum EventType {
    CIRCUIT
    RALLY
}
